# AUTOGENERATED! DO NOT EDIT! File to edit: UCF101_unsupervised.ipynb (unless otherwise specified).

__all__ = ['read_data', 'sometimes', 'wrapVideo', 'unsuplabel', 'get_dsets', 'get_dls', 'setup_log', 'get_learner',
           'save_learner']

# Cell
#import torch
import torch.nn as nn
from fastai.vision.all import *
from fastai.data.all import *
from fastai.distributed import *
import pandas as pd
from pathlib import Path
import time
from datetime import date
from vidaug import augmentors as va

import torchvision.transforms as T


from .video_block import *
from .inflator import *
from .triplet_loss import *
from .unsupcon_module import *
from .cus_cbs import *

#Pretrained models
from .pretrained_r2p1d50 import *
from resnetmodels.mean import get_mean_std

# Cell
def read_data():
    path = '/mnt/data/eugeniomarinelli/UCF_Crimes/normal_videos.csv'
    return pd.read_csv(path, index_col=0)

# Cell
def sometimes(x):
    return va.Sometimes(0.5,x)

def wrapVideo(x):
    return Video(x)

def unsuplabel(x):
    return 1

# Cell
def get_dsets(df, l=20, size=512,skip=20,n_views=2):
    vid_paths = df.vid_files.values
    prefix = Path('/mnt/data/eugeniomarinelli/UCF_Crimes/Videos')
    vid_paths = [prefix/file for file in vid_paths]


    vid_pip = [createVideoForm(l=l,skip=skip, form='img'),
               Resize(size, method=ResizeMethod.Pad),
               sometimes(va.HorizontalFlip()),
               va.GaussianBlur(1.),
#               sometimes(va.InvertColor()),
               va.RandomRotate(10),
               wrapVideo]

    pip = [*([vid_pip]*n_views),[unsuplabel, Categorize]]
    #splits
    splits = ColSplitter('val')(df)

    # Datasets and dataloaders
    dsets = Datasets(vid_paths, pip, splits=splits)
    return dsets, splits

# Cell
def get_dls(dsets,splits,df, bs= 4, normalize='kinetics'):

    mean, std = get_mean_std(1,normalize)
    dls  = dsets.dataloaders(bs=bs,
                             shuffle_train=True,
                             after_item=ToTensor(),
                             after_batch=[IntToFloatTensor(), Normalize.from_stats(*imagenet_stats)])

    dls.valid.shuffle = True
    return dls


# Cell
def setup_log(learn,name, append=True):
     # set up logs file
    # now = datetime.now()
    # time = now.strftimes("%d_%m")
    logs_file = '/mnt/data/eugeniomarinelli/UCF_experiments/training_results/logs_UCF_CRIMES_'+name+'.csv'
    Logs_csv =   CSVLogger(fname= logs_file, append=append)
    learn.add_cb(Logs_csv)

# Cell
def get_learner(df,
                pretrained_model='r2p1d50_K',
                l=40, size=224, bs = 4, skip=20, embs_size=256,n_views=2,
                normalize = 'kinetics', logs=True):

    dsets,splits = get_dsets(df, l, size, skip, n_views)

    dls = get_dls(dsets,splits,df, normalize=normalize)

    if pretrained_model in inserted_models:
        model = inserted_models[pretrained_model]
    else: raise 'model not present in pretrained models'


    body = create_body(model, cut=-2)


    Loss= ContrastiveLoss()
    head = inflate(create_head(4096, embs_size, lin_ftrs=[]))
    model = nn.Sequential(body,head)



    learn = Learner(dls,
                model,
                splitter=splitter ,
                loss_func=Loss)

    learn.add_cb(ContrastiveCallback(n_views))

    time = date.today().strftime("_%d-%m")
    if logs:
        setup_log(learn, str(pretrained_model)+'unsupervised'+'5fr_30unf'+time, append=True)

    return learn


# Cell
def save_learner(learn, name):
    prefix = '/mnt/data/eugeniomarinelli/'
    try:
        learn.export(prefix+'UCF_experiments/trained_models_cnn/learners/learner_ucf101_'+name)
    except: print("learner export didn't work")
    try:
        torch.save(learn.model,prefix+'UCF_experiments/trained_models_cnn/models/model_ucf101_'+name+'.pth')
    except: torch.save(learn.model.state_dict(),prefix+'UCF_experiments/trained_models_cnn/models/state_dict_ucf101_'+name)

