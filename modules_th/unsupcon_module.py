# AUTOGENERATED! DO NOT EDIT! File to edit: 08_supconloss_module.ipynb (unless otherwise specified).


from __future__ import print_function


__all__ = ['cat_views', 'stack_views', 'ContrastiveCallback', 'set_cbs', 'cos_dist', 'ContrastiveLoss', 'ContrastiveModel',
           'supcon_accuracy', 'silh_score']

# Cell
import torch
import torch.nn as nn
from fastai.vision.all import *
from fastai.data.all import *
import torch.nn.functional as F
#nbdev_comment from __future__ import print_function
from sklearn.metrics import silhouette_score
import torch
import torch.nn as nn

# Cell
# Callbacks
def cat_views(self):
    self.learn.xb = (torch.cat(self.xb),)

def stack_views(self):
    embs = self.pred[1] if isinstance(self.pred,tuple) else self.pred
    bs = len(embs)//self.nviews
    embs = L(chunked(embs, bs))
    embs = embs.map(lambda x: L(x).stack()).stack(dim=1)
    self.learn.pred = (self.pred[0], embs) if isinstance(self.pred,tuple) else embs

class ContrastiveCallback(Callback):
    def __init__(self, nviews):
        super().__init__()
        self.nviews = nviews
    def after_pred(self): stack_views(self)
    def before_batch(self): cat_views(self)

def set_cbs(learn, loss_name, nviews):
    if loss_name in ['CEL-SCL','CEL-TL']: learn.add_cbs([ContrastiveCallback(nviews),LossesRecorderCallback()]) #When we use a mixed loss we put the MixedLossTracker
    if loss_name in ['CEL-SCL','SCL'   ]: learn.add_cb(ContrastiveCallback(nviews))
    else:
        def f(self): self.learn.yb = (self.y.repeat(nviews),)
        learn.add_cbs([Callback(before_batch=cat_views),
                       Callback(before_batch=f)])



# Cell

# Loss
"""
Author: Yonglong Tian (yonglong@mit.edu)
Date: May 07, 2020
"""


def cos_dist(anchor_feature,contrast_feature):
    anchor_feature,contrast_feature = F.normalize(anchor_feature), F.normalize(contrast_feature)
    return - torch.matmul(anchor_feature, contrast_feature.T)




class ContrastiveLoss(nn.Module):
    """Supervised Contrastive Learning: https://arxiv.org/pdf/2004.11362.pdf.
    It also supports the unsupervised contrastive loss in SimCLR"""

    def __init__(self, temperature=0.07, contrast_mode='all',
                 base_temperature=0.07, p = 'cos'):
        super(ContrastiveLoss, self).__init__()
        self.temperature = temperature
        self.contrast_mode = contrast_mode
        self.base_temperature = base_temperature
        self.dist_fn = cos_dist if p == 'cos' else partial(torch.cdist,p=p)
    def forward(self, features, labels=None, mask=None):
        """Compute loss for model. If both `labels` and `mask` are None,
        it degenerates to SimCLR unsupervised loss:
        https://arxiv.org/pdf/2002.05709.pdf

        Args:
            features: hidden vector of shape [bsz, n_views, ...].
            labels: ground truth of shape [bsz].
            mask: contrastive mask of shape [bsz, bsz], mask_{i,j}=1 if sample j
                has the same class as sample i. Can be asymmetric.
        Returns:
            A loss scalar.
        """
        device = (torch.device('cuda')
                  if features.is_cuda
                  else torch.device('cpu'))

        if len(features.shape) < 3:
            raise ValueError('`features` needs to be [bsz, n_views, ...],'
                             'at least 3 dimensions are required')
        if len(features.shape) > 3:
            features = features.view(features.shape[0], features.shape[1], -1) #flatten along c x h x w

        batch_size = features.shape[0]
        
        if labels is not None and mask is not None:
            raise ValueError('Cannot define both `labels` and `mask`')



        mask = torch.eye(batch_size, dtype=torch.float32).to(device)

        contrast_count = features.shape[1]
        contrast_feature = torch.cat(torch.unbind(features, dim=1), dim=0)
        if self.contrast_mode == 'one':
            anchor_feature = features[:, 0]
            anchor_count = 1
        elif self.contrast_mode == 'all':
            anchor_feature = contrast_feature
            anchor_count = contrast_count
        else:
            raise ValueError('Unknown mode: {}'.format(self.contrast_mode))

        # compute logits
        anchor_dot_contrast = torch.div(
             - self.dist_fn(anchor_feature, contrast_feature),
            self.temperature)
        # for numerical stability
        logits_max, _ = torch.max(anchor_dot_contrast, dim=1, keepdim=True)
        logits = anchor_dot_contrast - logits_max.detach()

        # tile mask
        mask = mask.repeat(anchor_count, contrast_count)
        # mask-out self-contrast cases
        logits_mask = torch.scatter(
            torch.ones_like(mask),
            1,
            torch.arange(batch_size * anchor_count).view(-1, 1).to(device),
            0
        )
        mask = mask * logits_mask

        # compute log_prob
        exp_logits = torch.exp(logits) * logits_mask
        log_prob = logits - torch.log(exp_logits.sum(1, keepdim=True))

        # compute mean of log-likelihood over positive
        mean_log_prob_pos = (mask * log_prob).sum(1) / mask.sum(1)

        # loss
        loss = - (self.temperature / self.base_temperature) * mean_log_prob_pos
        loss = loss.view(anchor_count, batch_size).mean()

        return loss

# Cell
class ContrastiveModel(Module):
    def __init__(self, encoder, head):
        self.encoder, self.head = encoder, head

    def forward(self, x):
        embs = F.normalize(self.head(self.encoder(x)))
        return embs

# Cell
#Metrics
def supcon_accuracy(out,y):
    y=y.repeat(out[0].size(0)//y.size(0))
    return accuracy(out[0],y)

def silh_score(pred,y):
    if isinstance(pred,tuple):
        _,pred = pred
    if len(pred.shape) > 2:
        pred = torch.cat(pred.unbind(dim=1))
    y=y.repeat(pred.size(0)//y.size(0))
    return skm_to_fastai(silhouette_score,flatten=False)(y,pred)
