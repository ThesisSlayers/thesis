# AUTOGENERATED! DO NOT EDIT! File to edit: 01_losses_tmp.ipynb (unless otherwise specified).

__all__ = ['cos_dist', 'TripletLoss', 'SupConLoss', 'SumLoss', 'CEL', 'MixedLoss', 'cat_views', 'stack_views',
           'ContrastiveCallback', 'MixedLossRecorder', 'AnomalyDetectionModel', 'MixedLossModel', 'splitter',
           'tl_accuracy', 'rm_embs', 'UniformizedSplitter', 'mixed_accuracy']

# Cell
from fastai.vision.all import *
import umap
import seaborn as sns; sns.set()
import numpy as np
import pandas as pd
import os

import torch
import torch.nn as nn
import torch.nn.functional as F

from sklearn.metrics import silhouette_score
from sklearn.cluster import AgglomerativeClustering
from sklearn.cluster import SpectralClustering

from functools import partial

# Cell
def cos_dist(x,y):
    x, y = F.normalize(x), F.normalize(y)
    return -x@y.T

class TripletLoss(Module):
    def __init__(self, p='cos', margin=0.1):
        self.margin = margin
        self.p = p
        self.dist_fn = cos_dist if p=='cos' else partial(torch.cdist, p=p)

    def forward(self, embs, y):
        embs = embs.flatten(1)
        d = self.dist_fn(embs,embs)
        N = len(embs)
        with torch.no_grad():
            # Getting indexes of the Positive and Negative sample of each Anchor
            dp, dn = d.clone(), d.clone()
            dp[y!=y[:,None]], dn[y==y[:,None]] = -np.inf, np.inf
            p, n = dp.argmax(1), dn.argmin(1)

        return (self.margin + d[range(N),p] - d[range(N),n]).clamp(0).sum()/N

# Cell
"""
Author: Yonglong Tian (yonglong@mit.edu) modified by Adrian Lopez Eugenio Marinelli
Date: May 07, 2020
"""

# def cos_dist(anchor_feature,contrast_feature):
#     anchor_feature,contrast_feature = F.normalize(anchor_feature), F.normalize(contrast_feature)
#     return - torch.matmul(anchor_feature, contrast_feature.T)

class SupConLoss(nn.Module):
    """Supervised Contrastive Learning: https://arxiv.org/pdf/2004.11362.pdf.
    It also supports the unsupervised contrastive loss in SimCLR"""

    def __init__(self, temperature=0.07, contrast_mode='all',
                 base_temperature=0.07, p = 'cos'):
        super(SupConLoss, self).__init__()
        self.temperature = temperature
        self.contrast_mode = contrast_mode
        self.base_temperature = base_temperature
        self.dist_fn = cos_dist if p == 'cos' else partial(torch.cdist,p=p)
    def forward(self, features, labels=None, mask=None):
        """Compute loss for model. If both `labels` and `mask` are None,
        it degenerates to SimCLR unsupervised loss:
        https://arxiv.org/pdf/2002.05709.pdf

        Args:
            features: hidden vector of shape [bsz, n_views, ...].
            labels: ground truth of shape [bsz].
            mask: contrastive mask of shape [bsz, bsz], mask_{i,j}=1 if sample j
                has the same class as sample i. Can be asymmetric.
        Returns:
            A loss scalar.
        """
        device = (torch.device('cuda')
                  if features.is_cuda
                  else torch.device('cpu'))

        if len(features.shape) < 3:
            raise ValueError('`features` needs to be [bsz, n_views, ...],'
                             'at least 3 dimensions are required')
        if len(features.shape) > 3:
            features = features.view(features.shape[0], features.shape[1], -1) #flatten along c x h x w

        batch_size = features.shape[0]
        if labels is not None and mask is not None:
            raise ValueError('Cannot define both `labels` and `mask`')
        elif labels is None and mask is None:
            mask = torch.eye(batch_size, dtype=torch.float32).to(device)
        elif labels is not None:
            labels = labels.contiguous().view(-1, 1)
            if labels.shape[0] != batch_size:
                raise ValueError('Num of labels does not match num of features')
            mask = torch.eq(labels, labels.T).float().to(device)
        else:
            mask = mask.float().to(device)

        contrast_count = features.shape[1]
        contrast_feature = torch.cat(torch.unbind(features, dim=1), dim=0)
        if self.contrast_mode == 'one':
            anchor_feature = features[:, 0]
            anchor_count = 1
        elif self.contrast_mode == 'all':
            anchor_feature = contrast_feature
            anchor_count = contrast_count
        else:
            raise ValueError('Unknown mode: {}'.format(self.contrast_mode))

        # compute logits
        anchor_dot_contrast = torch.div(
             - self.dist_fn(anchor_feature, contrast_feature),
            self.temperature)
        # for numerical stability
        logits_max, _ = torch.max(anchor_dot_contrast, dim=1, keepdim=True)
        logits = anchor_dot_contrast - logits_max.detach()

        # tile mask
        mask = mask.repeat(anchor_count, contrast_count)
        # mask-out self-contrast cases
        logits_mask = torch.scatter(
            torch.ones_like(mask),
            1,
            torch.arange(batch_size * anchor_count).view(-1, 1).to(device),
            0
        )
        mask = mask * logits_mask

        # compute log_prob
        exp_logits = torch.exp(logits) * logits_mask
        log_prob = logits - torch.log(exp_logits.sum(1, keepdim=True))

        # compute mean of log-likelihood over positive
        mean_log_prob_pos = (mask * log_prob).sum(1) / mask.sum(1)

        # loss
        loss = - (self.temperature / self.base_temperature) * mean_log_prob_pos
        loss = loss.view(anchor_count, batch_size).mean()

        return loss

# Cell
class SumLoss(Module):
    def __init__(self, loss1 , loss2=CrossEntropyLossFlat, alpha=1.0, n_views=2, **kwargs):
        self.alpha = alpha
        self.loss1 = loss1(**kwargs)
        self.loss2 = loss2()
        self.n_views = n_views
        self.cel =[]
        self.usl = []

    def forward(self, out, y):
        y_cel = y.repeat(self.n_views)
        CEL = self.loss2(out[0],y_cel)
        self.cel.append(CEL)
        USL = self.loss1(out[1],y)
        self.usl.append(USL)
        return CEL+self.alpha*USL


class CEL(Module):
    def forward(self, out, y):
        CEL = CrossEntropyLossFlat()(out[0], y)
        return CEL

# Cell
class MixedLoss(Module):
    def __init__(self, SecondLoss, alpha=1, **kwargs):
        self.alpha = alpha
        self.CEL, self.SL = CrossEntropyLossFlat(), SecondLoss(**kwargs)
        self.cel, self.sl = 0, 0

    def forward(self, out, y):
        y_cel = y.repeat(out[0].size(0)//y.size(0))
        cel = self.CEL(out[0], y_cel)
        sl = self.SL(out[1], y)
        self.cel = cel.item()
        self.sl = self.alpha*sl.item()
        return cel + self.alpha*sl

# Cell
def cat_views(self):
    self.learn.xb = (torch.cat(self.xb),)

def stack_views(self):
    pred = self.pred[1] if isinstance(self.pred,tuple) else self.pred
    bs = len(pred)//self.nviews
    pred = L(chunked(pred, bs))
    pred = pred.map(lambda x: L(x).stack()).stack(dim=1)
    self.learn.pred = (self.pred[0], pred) if isinstance(self.pred,tuple) else pred

class ContrastiveCallback(Callback):
    def __init__(self, nviews):
        super().__init__()
        self.nviews = nviews
    def after_pred(self): stack_views(self)
    def before_batch(self): cat_views(self)

# Cell
class MixedLossRecorder(Callback):
    def __init__(self, *args, **kwrgs):
        super().__init__(*args, **kwrgs)
        self.cel_batch_losses = [[], []]
        self.sl_batch_losses_ = [[], []]

        # Losses of every epoch
        self.cel_losses = [[], []]
        self.sl_losses_ = [[], []]

    def before_fit(self):
        self.learn.ml_recorder = self

    def after_batch(self):
        self.cel_batch_losses[not self.training].append(self.loss_func.cel/self.dl.bs)
        self.sl_batch_losses[not self.training].append(self.loss_func.sl/self.dl.bs)

    def after_epoch(self):
        self.cel_losses[0].append(sum(self.cel_batch_losses[0])/len(self.cel_batch_losses[0]))
        self.cel_losses[1].append(sum(self.cel_batch_losses[1])/len(self.cel_batch_losses[1]))
        self.sl_losses[0].append(sum(self.sl_batch_losses[0])/len(self.sl_batch_losses[0]))
        self.sl_losses[1].append(sum(self.sl_batch_losses[1])/len(self.sl_batch_losses[1]))

# Cell
class AnomalyDetectionModel(Module):
    "Deprecated in favour of MixedLossModel"
    def __init__(self, encoder, head):
        self.encoder, self.head = encoder, head

    def forward(self, x):
        embs = self.head[0:5](self.encoder(x))
        scrs = self.head[5:](embs)
        embs = embs
        return scrs, embs

class MixedLossModel(Module):
    def __init__(self, encoder, head, i=5):
        self.encoder, self.head, self.i = encoder, head, i

    def forward(self, x):
        embs = self.head[0:self.i](self.encoder(x))
        scrs = self.head[self.i:](embs)
        return scrs, embs


def splitter(model:(MixedLossModel,nn.Sequential)):
    if isinstance(model,MixedLossModel):
        return [params(model.encoder), params(model.head)]
    else:
        return [params(model[0]),params(model[1])]

def tl_accuracy(out, y):
    return accuracy(out[0], y)

def rm_embs(self):
    self.learn.pred = self.pred[0]

class UniformizedSplitter():
    def __init__(self,items,lbls,unif_fn,valid_pct=0.2, n_lbls=8, n_el=8):
        self.lbls = lbls
        self.unif_fn = unif_fn
        self.splits= RandomSplitter(valid_pct=valid_pct,seed=42)(items)
        self.n_lbls = n_lbls
        self.n_el = n_el
    def __call__(self,items):
        splits = self.splits
        return [self.unif_fn(idxs, self.lbls[idxs] , n_lbl=self.n_lbls, n_el=self.n_el) for idxs in splits]

# Cell

def mixed_accuracy(out, y):
    out = out[0] if isinstance(out, tuple) else out
    y = y.repeat(out.size(0)//y.size(0))
    return out.argmax(1).eq(y).float().mean()